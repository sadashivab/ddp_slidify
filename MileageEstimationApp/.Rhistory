se2/se1
library(caret)
library(kernlab)
data(spam)
data(spam)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
nrow(training)
nrow(testing)
nrow(adData)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
nrow(training)
nrow(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(traing)
names(training)
hist(training$Superplasticizer)
hist(testing$Superplasticizer)
hist(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
?preProcess
?grep1
?grepl
grep("IL*",names(training))
grep("^IL*",names(training))
grep("^IL\_*",names(training))
grep("^IL_*",names(training))
trainingPCA <- training[,grep("^IL_*",names(training))]
?preProcess
preProcess(trainingPCA,
method = c("pca"),
thresh = 0.90,
na.remove = TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL_*",names(training))]
trainingIL$diagnosis <- training$diagnosis
str(trainingIL)
tranPCA <- preProcess(trainingIL, method = c("pca"), thresh = 0.80)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL_*",names(training))]
trainingIL$diagnosis <- training$diagnosis
tranPCA <- preProcess(trainingIL, method = c("pca"), thresh = 0.80)
tranPCA <- preProcess(trainingIL[,-diagnosis], method = c("pca"), thresh = 0.80)
tranPCA <- preProcess(trainingIL[,-"diagnosis"], method = c("pca"), thresh = 0.80)
tranPCA <- preProcess(trainingIL[,-13], method = c("pca"), thresh = 0.80)
str(trainPCA)
trainPCA <- preProcess(trainingIL[,-13], method = c("pca"), thresh = 0.80)
str(trainPCA)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL_*",names(training))]
trainingIL$diagnosis <- training$diagnosis
preProc <- preProcess(trainingIL[,-13], method = c("pca"), thresh = 0.80)
trainPCA <- predict(preProc,trainingIL)
trainPCA <- predict(preProc,trainingIL[,-13])
modelFit <- train(diagnosis ~ ., method = "glm", data = trainPCA)
modelFit <- train(trainPCA$diagnosis ~ ., method = "glm", data = trainPCA)
str(trainPCA)
modelFit <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPCA)
install.package("e1071")
install.packages("e1071")
modelFit <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPCA)
testIL <- testing[,grep("^IL_*",names(testing))]
testingIL$diagnosis <- testing$diagnosis
testingIL <- testing[,grep("^IL_*",names(testing))]
testingIL$diagnosis <- testing$diagnosis
testPC <- predict(preProc,testingIL[,-13])
confusionMatrix(testing$diagnosis, predict(modelFit,testPC))
names(adData)
modelFitAI <- train(diagnosis ~ ., method = "glm", data = training)
modelFitAI <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainingIL)
testAI <- predict(modelFitAI, testingIL[,-13])
confusionMatrix(testingIL$diagnosis, predict(modelFit,testPC))
confusionMatrix(testingIL$diagnosis, predict(modelFitAI,testAI))
trainingIL <- training[,(grep("^IL_*",names(training))||diagnosis]
trainingIL <- training[,(grep("^IL_*",names(training))||"diagnosis"]
trainingIL <- training[,(grep("^IL_*",names(training)) "diagnosis"]
trainingIL <- training[,(grep("^IL_*",names(training))]
trainingIL <- training[,(grep("^IL_*", names(training) ) ]
trainingIL <- training[,grep("^IL_*", names(training) ) ]
trainingIL <- training[,grep("^IL_*",names(training)) "diagnosis"]
trainingIL <- training[,grep("^IL_*",names(training)) $diagnosis]
trainingIL <- training[,grep("^IL_*",names(training))]
trainingIL$diagnosis <- training[,grep("^IL_*",names(training))]$diagnosis
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL_*",names(training))]
trainingIL$diagnosis <- training[,grep("^IL_*",names(training))]$diagnosis
preProc <- preProcess(trainingIL[,-13], method = c("pca"), thresh = 0.80)
trainPCA <- predict(preProc,trainingIL[,-13])
modelFit <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPCA)
testingIL <- testing[,grep("^IL_*",names(testing))]
testingIL$diagnosis <- testing[,grep("^IL_*",names(training))]$diagnosis
testPC <- predict(preProc,testingIL[,-13])
confusionMatrix(testingIL$diagnosis, predict(modelFit,testPC))
training[,grep("^IL_*",names(training))]$diagnosis
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL_*",names(training))]
trainingIL$diagnosis <- training$diagnosis
preProc <- preProcess(trainingIL[,-13], method = c("pca"), thresh = 0.80)
trainPCA <- predict(preProc,trainingIL[,-13])
modelFit <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPCA)
testingIL <- testing[,grep("^IL_*",names(testing))]
testingIL$diagnosis <- testing$diagnosis
testPC <- predict(preProc,testingIL[,-13])
confusionMatrix(testingIL$diagnosis, predict(modelFit,testPC))
modelFitAI <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainingIL[,-13])
testAI <- predict(modelFitAI, testingIL[,-13])
confusionMatrix(testingIL$diagnosis, predict(modelFitAI,testAI))
testAI <- predict(modelFitAI, testingIL)
confusionMatrix(testingIL$diagnosis, predict(modelFitAI,testAI))
?confusionMatrix
predict(modelFitAI,testAI)
modelFitAI
modelFit
modelFitAI <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainingIL)
testAI <- predict(modelFitAI, testingIL)
confusionMatrix(testingIL$diagnosis, predict(modelFitAI,testAI))
testAI <- predict(modelFitAI, testingIL[,-13])
confusionMatrix(testingIL$diagnosis, predict(modelFitAI,testAI))
modelFitAI <- train(diagnosis ~ ., method = "glm", data = trainingIL)
modelFitAI <- train(diagnosis ~ ., method = "glm", data = trainingIL)
confusionMatrix(testingIL$diagnosis, predict(modelFitAI,testingIL[,-13]))
confusionMatrix(testingIL$diagnosis, predict(modelFit,testPC))
install(devtools)
install.packages(devtools)
install.packages("devtools")
install_github('slidify', 'ramnathv')
install.packages("github")
install.packages("git")
install.packages("install_github")
library(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
library(Datasets)
library(datasets)
data(swiss)
?swiss
?InsectSprays
summary(InsectSprays)
library(ggplot2)
?boxplot
boxplot(InsectSprays)
boxplot(InsectSprays, count ~ spray)
?boxplot
boxplot(count ~ spray, data=InsectSprays)
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
lm(y ~ x)
lm(y[2:101] ~ x[2:101])
abline(lm(y[2:101] ~ x[2:101]))
?influence.measures
?influence.measures
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
y <- x1 + rnorm(n, sd = .3)
a <- summary(lm(y ~ x1))$cov.unscaled[2,2]
c(summary(lm(y ~ x1 + x2))$cov.unscaled[2,2],
summary(lm(y~ x1 + x2 + x3))$cov.unscaled[2,2]) / a
temp <- apply(betas, 1, var); temp[2 : 3] / temp[1]
summary(lm(y ~ x1))
a
summary(lm(y ~ x1))$cov
library(dataset)
library(Dataset)
library(dataSet)
dataset(mtcars)
mtcars
fit <- lm(mpg ~ wt + cyl, data = mtcars)
fit
str(mtcars)
?asfactor
?asFactor
?as.Factor
?as.factor
y <- mtcars$mpg
x1 <- mtcars$wt
x2 <- as.factor(mtcars$cyl)
fit <- lm(y ~ x1 + x2)
fit
unique(x2)
?swizz
?swiss
str(swiss)
fit <- lm(y ~ x2)
fit
fit1 <- lm(y ~ x1)
fit2 <- lm(y ~ x2)
fit1
fit2
fit3 <- lm(x1 ~ x2)
fit3
fit3 <- lm(x2 ~ x1)
fit3 <- lm(x1 ~ x2)
fit3
fit2 <- lm(y-37.285 ~ x2)
fit2
fit2 <- lm(y-2.2857 ~ x2)
fit2
fit4 <- lm(y, x1 + x2)
fit4 <- lm(y, x2 + x1)
fit3 <- lm(y ~ x2 + x1)
y <- mtcars$mpg
x1 <- mtcars$wt
x2 <- as.factor(mtcars$cyl)
fit3 <- lm(y ~ x2 + x1)
fit3
fit1 <- lm(y ~ x2)
fit1
summary(fit3)
summary(fit3)$coef
summary(fit1)$coef
x1c <- x1 -mean(x1)
rm(x1c)
fiti <- lm(y ~ x1:x2)
summary(fiti)$coef
fiti <- lm(y ~ x1 + x2 + x1:x2)
summary(fit3)$coef
summary(fiti)$coef
summary(fit3)$adj.r.squared
summary(fiti)$adj.r.squared
?lrtest
??lrtest
lrtest(fiti, fit3)
library(lmtest)
install.packages("lmtest")
library(lmtest)
??lrtest
?lrtest
fiti <- lm(y ~ x1 + x2 + x1:x2)
summary(fit3)$coef
summary(fiti)$coef
summary(fit3)$adj.r.squared
summary(fiti)$adj.r.squared
lrtest(fiti, fit3)
lmtest(fiti, fit3)
anova(fiti, fit3)
lrtest(fit3, fiti)
lrtest(fiti, fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plt(x~y)
plot(x~y)
plot(y~x)
fit5 <- lm(y~x)
predict(fit5, newdata=c(11.72))
predict(fit5, newdata=data.framec((11.72))
)
data.frame(c(11.72))
predict(fit5, newdata=data.frame(c(11.72)))
predict(fit5, newdata=x)
predict(fit5, newdata=data.frame(x))
fit5 <- lm(y[1:4~x[1:4])
fit5 <- lm(y[1:4]~x[1:4])
predict(fit5, newdata=data.frame(x))
fit5 <- lm(y~x)
predict(fit5, newdata=data.frame(x))
hatvalues(fit5)
?influence.measures
?dfbeta
dfbeta(fit)
dfbeta(fit5)
dfbeta(fit5,2)
dfbetas(fit5)
hatvalues(fit5)
datasets(mtcars)
library(datasets)
names(mtcars)
data(mtcars)
pairs(mtcars, panel = panel.smooth, main = "Motor Trends")
?mtcars
str(mtcars)
boxplot(mpg ~ cyl + am, data = mtcars)
?boxplot
?mtcars
boxplot(mpg ~ cyl + am, data = mtcars)
boxplot(mpg ~ cyl + am, data = mtcars, boxfill = am)
boxplot(mpg ~ cyl + am, data = mtcars, boxfill = mtcars$am)
boxplot(mpg ~ cyl + am, data = mtcars, boxfill = unique(mtcars$am))
boxplot(mpg ~ cyl + am, data = mtcars, boxfill = unique(mtcars$cyl))
mpg <- mtcars$mpg
f1f2 <- interaction(mpg$cyl, mpg$am)
ggplot(aes(y = mpg, x = cyl+am), data=mtcars) + geom_boxplot()
library(datasets)
library(ggplot2)
require(stats)
require(graphics)
data(mtcars)
names(mtcars)
str(mtcars)
ggplot(aes(y = mpg, x = cyl+am), data=mtcars) + geom_boxplot()
ggplot(aes(y = mpg, x = cyl), data=mtcars) + geom_boxplot()
?ggplot
ggplot(df=mtcars, aes(y = mpg, x = cyl)) + geom_boxplot()
ggplot(data=mtcars, aes(y = mpg, x = cyl)) + geom_boxplot()
ggplot(data=mtcars, aes(y = mpg, x = cyl, fill=am)) + geom_boxplot()
ggplot(data=mtcars, aes(y = mpg, x = am, fill=cyl)) + geom_boxplot()
ggplot(data=mtcars, aes(y = mpg, x = am)) + geom_boxplot()
?boxplot
ggplot(data=mtcars, aes(y = mpg, x = am)) + facet_wrap (~cyl) + geom_boxplot()
ggplot(data=mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am) + geom_boxplot()
levels(mtcars$am)
(unique(mtcars$am))
ggplot(data=mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am) + geom_boxplot()
ds_mtcars <- mtcars
ds_mtcars$am <- as.factor(ds_mtcars$am)
ds_mtcars$cyl <- as.factor(ds_mtcars$cyl)
levels(unique(ds_mtcars$am))
levels(ds_mtcars$am) <- c("Auto", "Manual")
ggplot(data=mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am) + geom_boxplot()
str(mtcars)
levels(unique(ds_mtcars$vs))
ds_mtcars$vs <- as.factor(ds_mtcars$vs)
levels(unique(ds_mtcars$vs))
mtcars
?mtcars
levels(ds_mtcars$vs) <- c("V", "S")
levels(unique(ds_mtcars$vs))
ds_mtcars
ggplot(data=ds_mtcars, aes(y = mpg, x = cyl + vs)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = vs)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = hp)) + facet_wrap (~am+vs) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = hp)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = disp)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = wt)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = disp)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = vs)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = hp)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = vs)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = vs)) + facet_wrap (~am+cyl) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am+vs) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = hp)) + facet_wrap (~am) + geom_boxplot()
ggplot(data=ds_mtcars, aes(y = mpg, x = disp)) + facet_wrap (~am) + geom_plot()
ggplot(data=ds_mtcars, aes(y = mpg, x = disp)) + facet_wrap (~am) + geom_ppoint()
ggplot(data=ds_mtcars, aes(y = mpg, x = disp)) + facet_wrap (~am) + geom_point()
ggplot(data=ds_mtcars, aes(y = mpg, x = cyl)) + facet_wrap (~am+vs) + geom_point()
ggplot(data=ds_mtcars, aes(y = mpg, x = hp)) + facet_wrap (~am) + geom_point()
ggplot(data=ds_mtcars, aes(y = mpg, x = disp)) + facet_wrap (~am) + geom_point()
ggplot(data=ds_mtcars, aes(y = mpg, x = wt)) + facet_wrap (~am) + geom_point()
ggplot(data=ds_mtcars, aes(y = wt, x = hp)) + facet_wrap (~am+vs) + geom_point()
ggplot(data=ds_mtcars, aes(y = mpg, x = wt)) + facet_wrap (~am+vs) + geom_point()
ggplot(data=ds_mtcars, aes(y = wt+mpg, x = hp)) + facet_wrap (~am+vs) + geom_point()
title: "Analysis of car charecteristics' impact on MPG using MT Car Dataset"
```{r setup, include=FALSE, echo=FALSE}
```{r setup, include=FALSE }
?ggplot
?geom_smooth
fit0 <- lm(mpg ~ ., data=ds_mtcars)
summary(fit0)
fit0 <- lm(mpg ~ hp+wt+am+disp, data=ds_mtcars)
summary(fit0)
fit0 <- lm(mpg ~ hp+wt+am+cyl, data=ds_mtcars)
summary(fit0)
fit0 <- lm(mpg ~ hp+wt+am, data=ds_mtcars)
summary(fit0)
bestmodel = step(lm(data = ds_mtcars, mpg ~ .), trace=0)
summary(bestmodel)
full.model <- lm(mpg ~ ., data = mtcars)
bestmodel = step(lm(data = mtcars, mpg ~ .), trace=0)
summary(bestmodel)
full.model <- lm(mpg ~ ., data = mtcars)
best.model <- step(full.model, direction = "backward")
summary(bestmodel)
full.model <- lm(mpg ~ ., data = mtcars)
summary(full.model)
modelA <- lm(mpg ~ ., data = mtcars)
summary(modelA)
modelA <- lm(mpg ~ .-cyl, data = mtcars)
summary(modelA)
modelA <- lm(mpg ~ .-cyl, data = mtcars)
summary(modelA)
modelF <- step(modelA, direction = "backward", trace=0)
modelF <- step(modelA, direction = "backward", trace=1)
summary(modelF)
anova(modelA, modelB, modelF)
modelB <- lm(mpg ~ .-cyl, data = mtcars)
anova(modelA, modelB, modelF)
modelA <- lm(mpg ~ ., data = mtcars)
modelB <- lm(mpg ~ .-cyl, data = mtcars)
modelF <- step(modelA, direction = "backward", trace=0)
anova(modelA, modelB, modelF)
plot(modelF)
par(mfrow=c(2,2))
summary(modelA)
par(mfrow=c(2,2))
summary(modelF)
par(mfrow=c(2,2))
plot(modelF)
?influence,measures
?influence.measures
dfbetas(modelF)
influence.measures(modelF)
mean(ds_mtcars.mpg)
mean(ds_mtcars$mpg)
summary())modelF)
summary(modelF)
install.packages("AppliedPredictiveModeling")
library(caret)
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
setwd("F:\\coursera\\9.Developing_Data_Products\\CarMileageEstimation")
shinyapps::deployApp("F:\\coursera\\9.Developing_Data_Products\\CarMileageEstimation")
setwd("F:\\coursera\\9.Developing_Data_Products\\CarMileageEstimation")
runApp()
library(shinyapps)
runApp()
library(shiny)
runApp()
library(shinyapps)
shinyapps::deployApp("F:\\coursera\\9.Developing_Data_Products\\CarMileageEstimation")
setwd("F:\\coursera\\9.Developing_Data_Products\\Presentation")
author("MileageEstimationApp")
library(slidify)
author("MileageEstimationApp")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
?influence.measures
